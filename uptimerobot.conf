###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################

[[outputs.file]]
  # debugging output
  files = ["stdout"]
  data_format = "influx"


###############################################################################
#                            INPUT PLUGINS                                   #
###############################################################################

[[inputs.http]]
  # query uptimerobots api. 
  # result will return json and is parsed using telegrafs json format
  
  # alot of output will be fielddrop'ed and tagexclude'd

  # don't change this, it's used by the processors further down
  name_override = "uptimerobot"
  
  # for basic accounts change this to 300s
  interval = "60s"
  
  urls = [
    "https://api.uptimerobot.com/v2/getMonitors"
  ]

  method = "POST"
  headers = {"Content-Type" = "application/x-www-form-urlencoded"}

  # supply a UPTIMEROBOT_KEY env var for this to work
  # or replace $UPTIMEROBOT_KEY with your actual api key
  body = "api_key=$UPTIMEROBOT_KEY&format=json&response_times=1&response_times_limit=1"

  # remove some fields and tags we don't need
  fielddrop = [ 
    "average_response_time", 
    "create_datetime",
    "id",
    "interval",
    "response_times_0_datetime" # _value wird über eine Processor umbenannt
  ]
  
  # exclude [[inputs.http]] url from tag set
  # for some reason the url data from uptimerobot does
  # not replace the inputs.http url tag
  tagexclude  = [ 
    "host",   
    "url" 
  ]
  
  data_format = "json"
  # api returns an object with two keys, we only need "monitors"
  json_query = "monitors"

  # convert average_response_time to a field instead of tag
  # will be converted to float by a processor
  # include url to convert into a tag in the next stage
  json_string_fields = ["average_response_time", "url"]
  
  # tags to use: 
  # friendly_name is renamed to monitor by a processor
  # status and type come as int, will be converted to enum
  tag_keys = [ "friendly_name", "status", "type" ]
  

###############################################################################
#                            PROCESSOR PLUGINS                                   #
###############################################################################
[[processors.converter]]
  [processors.converter.fields]
    tag = ["url"]


[[processors.rename]]
  namepass = ["uptimerobot"]
  # as we query only one value, prettify the field name
  [[processors.rename.replace]]
    field = "response_times_0_value"
    dest = "response_time"

  # rename monitors friendly_name
  [[processors.rename.replace]]
    tag = "friendly_name"
    dest = "monitor"


[[processors.enum]]
  namepass = ["uptimerobot"]
  [[processors.enum.mapping]]
    # Name of the tag to map. Globs accepted.
    tag = "status"

    # map status codes to text
    # https://uptimerobot.com/#parameters
    [processors.enum.mapping.value_mappings]      
      0 = "paused"
      1 = "not checked yet"
      2 = "up" 
      8 = "seems down"
      9 = "down"

[[processors.enum]]
  namepass = ["uptimerobot"]
  [[processors.enum.mapping]]
    ## Name of the tag to map. Globs accepted.
    tag = "type"

    # map type to text
    # https://uptimerobot.com/#parameters
    [processors.enum.mapping.value_mappings]      
      1 = "HTTP"
      2 = "Keyword"
      3 = "Ping"
      4 = "Port"
      5 = "Heartbeat"

